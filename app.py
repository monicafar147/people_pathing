import streamlit as st
from streamlit_folium import folium_static
import folium
import numpy as np

def main():

    # upload video
    video_file = open('resources/queue_two_people.mp4', 'rb')
    video_bytes = video_file.read()

    st.image('resources/BCX EXA.PNG',use_column_width=False)
    st.header('''Epsilon tech presents: Q analytics''')

    # get data from rekognition
    output = {'0': ['0', '66', '133', '200', '266', '333', '399', '466', '533', '600', '666', '733', '800', '866', '933', '1000', '1066', '1133', '1200', '1266', '1333', '1399', '1466', '1533', '1599', '1666', '1733', '1799', '1866', '1933', '1999', '2066', '2133', '2199', '2266', '2333', '2399', '2466', '2533', '2600', '2666', '2733', '2800', '2866', '2933', '3000', '3066', '3133', '3200', '3266', '3333', '3400', '3466', '3533', '3600', '3666', '3733', '3800', '3866', '3933', '4000', '4066', '4133', '4200', '4266', '4333', '4400', '4466', '4533', '4600', '4666', '4733', '4800', '4866', '4933', '4999', '5066', '5133', '5199', '5266', '5333', '5399', '5466', '5533', '5599', '5666', '5733', '5799', '5866', '5933', '5999', '6066', '6133', '6199', '6266', '6333', '6399', '6466', '6533', '6599', '6666', '6733', '6799', '6866', '6933', '6999', '7066', '7133', '7199', '7266', '7333', '7399', '7466', '7533', '7599', '7666', '7733', '7799', '7866', '7933', '7999', '8066', '8133', '8199', '8266', '8333', '8399', '8466', '8533', '8599', '8666', '8733', '8799', '8866', '8933', '8999', '9066', '9133', '9199', '9266', '9333', '9399', '9466', '9533', '9599', '9666', '9733', '9800', '9866', '9933', '10000', '10066', '10133', '10200', '10266', '10333', '10400', '10466', '10533', '10600', '10666', '10733', '10800', '10866', '10933', '11000', '11066', '11133', '11200', 
'11266', '11333', '11400', '11466', '11533', '11600', '11666', '11733', '11800', '11866', '11933', '12000', '12066', '12133', '12200', '12266', '12333', '12400', '12466', '12533', '12600', '12666', '12733', '12800', '12866', '12933', '13000', '13066', '13133', '13200', '13266', '13333', '13400', '13466', '13533', '13600', '13666', '13733', '13800', '13866', '13933', '14000', '14066', '14133', '14200', '14266', '14333', '14400', '14466', '14533', '14600', '14666', '14733', '14800', '14866', '14933', '15000', '15066', '15133', '15200', '15266', '15333', '15400', '15466', '15533', '15600', '15666', '15733', '15800', '15866', '15933', '16000', '16066', '16133', '16200', '16266', '16333', '16400', '16466', '16533', '16600', '16666', '16733', '16800', '16866', '16933', '17000', '17066', '17133', '17200', '17266', '17333', '17400', '17466', '17533', '17600', '17666', '17733', '17800', '17866', '17933', '18000', '18066', '18133', '18200', '18266', '18333', '18400', '18466', '18533', '18600', '18666', '18733', '18800', '18866', '18933', '19000', '19066', '19133', '19200', '19266', '19333', '19400', '19466', '19533', '19600', '19666', '19733', '19799', '19866', '19933', '19999', '20066', '20133', '20199', '20266', '20333', '20399', '20466', '20533', '20599', '20666', '20733', '20799', '20866', '20933', '20999', '21066', '21133', '21199', '21266', '21333', '21399', '21466', '21533', '21599', '21666', '21733', '21799', '21866', '21933', '21999', '22066', '22133', '22199', '22266', '22333', '22399', '22466', '22533', '22599', '22666', '22733', '22799', '22866', '22933', '22999', '23066', '23133', '23199', '23266', '23333', '23399', '23466', '23533', '23599', '23666', '23733', '23799', '23866', '23933', '23999', '24066', '24133', '24199', '24266', '24333', '24399', '24466', '24533', '24599', '24666', '24733', '24799', '24866', '24933', '24999', '25066', '25133', '25199', '25266', '25333', '25399', '25466', '25533', '25599', '25666', '25733', '25799', '25866', '25933', '25999', '26066', '26133', '26199', '26266', '26333', '26399', '26466', '26533', '26599', '26666', '26733', '26799', '26866', '26933', '26999', '27066', '27133', '27199', '27266', '27333', '27399', '27466', '27533', '27599', '27666', '27733', '27799', '27866', '27933', '27999', '28066', '28133', '28199', '28266', '28333', '28399', '28466', '28533', '28599', '28666', '28733', '28799', '28866', '28933', '28999', '29066', '29133', '29199', '29266', '29333', 
'29399'], '1': ['466', '533', '600', '666', '733', '800', '866', '933', '1000', '1066', '1133', '1200', '1266', '1333', '1399', '1466', '1533', '1599', '1666', '1733', '1799', '1866', '1933', '1999', '2066', '2133', '2199', '2266', '2333', '2399', '2466', '2533', '2600', 
'2666', '2733', '2800', '2866', '2933', '3000', '3066', '3133', '3200', '3266', '3333', '3400', '3466', '3533', '3600', '3666', '3733', '3800', '3866', '3933', '4000', '4066', '4133', '4200', '4266', '4333', '4400', '4466', '4533', '4600', '4666', '4733', '4800', '4866', 
'4933', '4999', '5066', '5133', '5199', '5266', '5333', '5399', '5466', '5533', '5599', '5666', '5733', '5799']}

    def get_duration(timestamps):
        '''return time duration in queue'''
        return int(timestamps[-1])/1000

    def get_duration_list(timestamps):
        durations = [get_duration(timestamps) for timestamps in output.values() ]
        return durations

    def get_average_duration(output):
        import numpy as np
        durations = [get_duration(timestamps) for timestamps in output.values() ]
        return np.mean(durations)

    st.sidebar.header('Track People Paths in video footage')
    st.sidebar.info('* Use AWS rekognition to get timestamps \n * Calcualte average time per person in queue \n * Show average time on a dashboard across SA \n * Show live time as a bar chart race \n * Alert store managers with a long queue rate')
    option = st.sidebar.radio("Choose an option",
    ("Customer tracking","Queue visualisation","Store Optimiser"))

    if option == "Customer tracking":

        st.video(video_bytes)
        if st.button('Person 0'):
            st.success('time taken for person 0 is {} seconds'.format(get_duration(output['1'])))
        if st.button('Person 1'):
            st.success('time taken for person 1 is {} seconds'.format(get_duration(output['0'])))
        if st.button('Average time'):
            st.success('average time at store is {} seconds'.format(get_average_duration(output)))

    if option == "Queue visualisation":
        # upload video
        video = open('resources/bar chart race.mp4', 'rb')
        video_chart = video.read()
        st.video(video_chart)

    if option == "Store Optimiser":

        st.markdown('## Get the average time per store based on a location')

        st.info('23 September 2020')

        locations = [[-26.205171,28.049815],[-33.925839,18.423218],[-26.190851,28.311338],
        [-29.857896,31.029198],[-25.706944,28.229444],[-26.673133,27.926147],
        [-33.917988,25.570066],[-22.945642,30.484972],[-26.258374,28.47173],
        [-33.75757,25.397099],[-23.904485,29.468851],[-33.733781,18.975228],
        [-26.852128,26.666719],[-33.963,22.461727],[-25.667562,27.242079],
        [-28.732262,24.762315],[-32.847212,27.442179],[-25.775071,29.464821],
        [-27.76952,30.791653],[-31.588926,28.784431],[-33.64651,19.448523],
        [-26.716667,27.1],[-25.634731,27.780224],[-31.897563,26.875329],
        [-25.85,25.633333],[-27.65036,27.234879],[-26.457937,29.465534],
        [-33.304216,26.53276],[-28.230779,28.307071],[-33.592343,22.205482],
        [-26.933655,29.241518],[-28.447758,21.256121],[-33.01167,17.944202],
        [-23.833222,30.163506],[-34.036643,23.049704],[-32.25,24.55]]

        from random import randint
        durations = [randint(0, 30) for i in range(36)]

        m = folium.Map(location=[-26.205171,28.049815], zoom_start=5)

        for point in range(0, len(locations)):
            folium.Marker(locations[point],popup="{}min".format(durations[point])).add_to(m)

        # call to render Folium map in Streamlit
        folium_static(m)

        if st.checklist('Long queues'):
            long_queues = [time for time in durations if time > 20]

            m = folium.Map(location=[-26.205171,28.049815], zoom_start=5)

            for point in range(0, len(long_queues)):
                folium.Marker(locations[point],popup="{}min".format(long_queues[point])).add_to(m)

            # call to render Folium map in Streamlit
            folium_static(m)

if __name__ == "__main__":
    main()
